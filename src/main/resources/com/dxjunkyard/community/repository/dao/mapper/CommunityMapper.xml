<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dxjunkyard.community.repository.dao.mapper.CommunityMapper">
    <insert id="addCommunity" useGeneratedKeys="true" keyProperty="id">
        insert into Communities(
                                owner_id,
                                place_id,
                                name,
                                summary_image_url,
                                summary_message,
                                summary_pr,
                                description,
                                profile_image_url,
                                member_count,
                                visibility,
                                status)
        values (
                   #{ownerId},
                   #{placeId},
                   #{name},
                   #{summaryImageUrl},
                   #{summaryMessage},
                   #{summaryPr},
                   #{description},
                   #{profileImageUrl},
                   1,
                   #{visibility},
                   1
            )
    </insert>

    <select id="getCommunityList" resultType="com.dxjunkyard.community.domain.CommunitySummary">
        select
            c.id,
            c.name,
            c.summary_image_url as summaryImageUrl ,
            c.summary_message as summaryMessage,
            c.summary_pr as summaryPr,
            COALESCE(
                    (SELECT cm.fav_flg
                     FROM spocomidb.CommunityMembers cm
                     WHERE cm.community_id = c.id
                       AND cm.user_id = #{myId}
                    LIMIT 1), 0 ) AS fav
        from
            Communities as c
    </select>
    <select id="searchCommunity" resultType="com.dxjunkyard.community.domain.CommunitySummary">
        select
            c.id,
            c.name,
            c.summary_image_url as summaryImageUrl ,
            c.summary_message as summaryMessage,
            c.summary_pr as summaryPr,
            COALESCE(
                    (SELECT cm.fav_flg
                     FROM spocomidb.CommunityMembers cm
                     WHERE cm.community_id = c.id
                       AND cm.user_id = #{myId}
                    LIMIT 1), 0 ) AS fav
        from
            Communities as c
        where
            name LIKE CONCAT('%',#{keyword},'%') or summary_message LIKE CONCAT('%',#{keyword},'%') or description LIKE CONCAT('%',#{keyword},'%') or summary_pr LIKE CONCAT('%',#{keyword},'%')
    </select>
    <select id="getMyCommunitySelector" resultType="com.dxjunkyard.community.domain.CommunitySelector">
        select
            c.id as communityId,
            c.name as communityName
        from
            Communities AS c
        JOIN
            CommunityMembers AS cm ON c.id = cm.community_id
        where
            cm.user_id = #{my_id}
    </select>
    <select id="getCommunity" resultType="com.dxjunkyard.community.domain.Community">
        select
            id,
            owner_id as ownerId,
            place_id as placeId,
            name,
            summary_image_url as summaryImageUrl ,
            summary_message as summaryMessage,
            summary_pr as summaryPr,
            description,
            member_count as memberCount,
            visibility as visibility
        from
            Communities as c
        where
            c.id = #{community_id}
    </select>
    <update id="updatePhotoPath">
        update Communities set
            summary_image_url = #{photoPath}
        where id = #{communityId}
    </update>
    <update id="updateCommunity">
        update Communities set
            owner_id = #{ownerId},
            place_id = #{placeId},
            name = #{name},
            summary_image_url = #{summaryImageUrl},
            summary_message = #{summaryMessage},
            summary_pr = #{summaryPr},
            description = #{description},
            member_count = #{memberCount},
            visibility = #{visibility}
        where id = #{id}
    </update>
</mapper>
